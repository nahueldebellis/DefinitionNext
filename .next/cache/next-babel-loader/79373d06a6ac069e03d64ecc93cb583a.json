{"ast":null,"code":"var _jsxFileName = \"/app/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport Footer from '../components/footer';\nimport Header from '../components/header';\nimport Semantic from '../components/semantic';\nimport Recomendation from '../components/recomendation';\n\nfunction App() {\n  const {\n    0: synonymList,\n    1: setSynonym\n  } = useState([\"\"]);\n  const {\n    0: definition,\n    1: setDefinition\n  } = useState(\"\");\n  const {\n    0: textValue,\n    1: setTextValue\n  } = useState(\"\");\n  const {\n    0: tags,\n    1: setTags\n  } = useState([]);\n\n  function recomendation(textarea) {\n    setTextValue(textarea);\n\n    const lastWord = txt => txt.split(' ').slice(-1);\n\n    fetch('http://localhost:5000/words/' + lastWord(textarea)).then(res => {\n      res.json().then(data => {\n        setDefinition(data['definition'] || \"...\");\n        setSynonym(data['synonyms'] || []);\n      });\n    });\n  }\n\n  ;\n\n  function sintaticAnalisis() {\n    const txt = document.getElementById('text');\n    fetch('http://localhost:5000/semantic/', {\n      method: 'POST',\n      body: txt.value\n    }).then(res => res.json().then(data => setTags(data['tags'])));\n  }\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(\"textarea\", {\n    value: textValue,\n    onChange: text => recomendation(text.target.value),\n    rows: \"10\",\n    cols: \"100\",\n    id: \"text\",\n    placeholder: \"Write here\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    onClick: sintaticAnalisis,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Get semantic\")), __jsx(Recomendation, {\n    definition: definition,\n    synonyms: synonymList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), __jsx(Semantic, {\n    tags: tags,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), __jsx(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/app/pages/index.js"],"names":["useState","Footer","Header","Semantic","Recomendation","App","synonymList","setSynonym","definition","setDefinition","textValue","setTextValue","tags","setTags","recomendation","textarea","lastWord","txt","split","slice","fetch","then","res","json","data","sintaticAnalisis","document","getElementById","method","body","value","text","target"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport Footer from '../components/footer';\nimport Header from '../components/header';\nimport Semantic from '../components/semantic';\nimport Recomendation from '../components/recomendation';\n\nfunction App() {\n\tconst [synonymList, setSynonym] = useState([\"\"]);\n\tconst [definition, setDefinition] = useState(\"\");\n\tconst [textValue, setTextValue] = useState(\"\");\n\tconst [tags, setTags] = useState([]);\n\n\tfunction recomendation(textarea) {\n\t\tsetTextValue(textarea);\n\t\tconst lastWord = txt => txt.split(' ').slice(-1);\n\n\t\tfetch('http://localhost:5000/words/'+lastWord(textarea))\n\t\t.then(res => {\n\t\t\tres.json()\n\t\t\t.then(data => {\n\t\t\t\tsetDefinition(data['definition'] || \"...\");\n\t\t\t\tsetSynonym(data['synonyms'] || []);\n\t\t\t})\n\t\t});\n\t};\n\n\tfunction sintaticAnalisis(){\n\t\tconst txt = document.getElementById('text');\n\t\tfetch('http://localhost:5000/semantic/', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: txt.value,\n\t\t}).then(res => res.json().then(data => setTags(data['tags']) ) );\n\t}\n\n\treturn (\n    \t<div>\n      \t\t<Header/>\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className='left'>\n\t\t\t\t\t<textarea value={textValue} onChange={ text => recomendation(text.target.value) } rows=\"10\" cols=\"100\" id='text' placeholder=\"Write here\"/><br/>\n\t\t\t\t\t<button onClick={sintaticAnalisis}>Get semantic</button>\n\t\t\t\t</div>\n\t\t\t\t<Recomendation definition={definition} synonyms={synonymList} />\n\t\t\t</div>\n\t\t\t<Semantic tags={tags}/>\n\t\t\t\n      \t\t<Footer/>\n\t\t</div>\n\t);\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}