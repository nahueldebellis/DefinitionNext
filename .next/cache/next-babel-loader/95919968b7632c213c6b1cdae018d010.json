{"ast":null,"code":"var _jsxFileName = \"/app/components/recomendation.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\n\nfunction Recomendation(props) {\n  function change(selectWord) {\n    var txt = document.getElementById('text');\n    var words = txt.value.trim().split(' ');\n    words.pop();\n    words.push(selectWord.trim());\n    txt.value = words.join(' ');\n  }\n\n  return __jsx(\"div\", {\n    className: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Definition: \"), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), __jsx(\"p\", {\n    id: \"definition\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, props.definition), __jsx(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Synonyms: \"), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), __jsx(\"ul\", {\n    id: \"synonym_list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, props.synonyms.map(function (synonym) {\n    return __jsx(\"li\", {\n      key: synonym,\n      className: \"synonym\",\n      onClick: function onClick(e) {\n        return change(e.target.innerHTML);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \" \", synonym);\n  })));\n}\n\nexport default Recomendation;","map":{"version":3,"sources":["/app/components/recomendation.js"],"names":["useState","useEffect","Recomendation","props","change","selectWord","txt","document","getElementById","words","value","trim","split","pop","push","join","definition","synonyms","map","synonym","e","target","innerHTML"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAE7B,WAASC,MAAT,CAAgBC,UAAhB,EAA2B;AACpB,QAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAZ;AACA,QAAMC,KAAK,GAAGH,GAAG,CAACI,KAAJ,CAAUC,IAAV,GAAiBC,KAAjB,CAAuB,GAAvB,CAAd;AACAH,IAAAA,KAAK,CAACI,GAAN;AACAJ,IAAAA,KAAK,CAACK,IAAN,CAAWT,UAAU,CAACM,IAAX,EAAX;AACAL,IAAAA,GAAG,CAACI,KAAJ,GAAYD,KAAK,CAACM,IAAN,CAAW,GAAX,CAAZ;AACN;;AAEE,SACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAC+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD/B,EAEI;AAAG,IAAA,EAAE,EAAC,YAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBZ,KAAK,CAACa,UAA1B,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,EAG6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAH7B,EAII;AAAI,IAAA,EAAE,EAAC,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIb,KAAK,CAACc,QAAN,CAAeC,GAAf,CAAmB,UAAAC,OAAO;AAAA,WACtB;AAAI,MAAA,GAAG,EAAEA,OAAT;AAAkB,MAAA,SAAS,EAAC,SAA5B;AAAsC,MAAA,OAAO,EAAE,iBAAAC,CAAC;AAAA,eAAIhB,MAAM,CAACgB,CAAC,CAACC,MAAF,CAASC,SAAV,CAAV;AAAA,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAoFH,OAApF,CADsB;AAAA,GAA1B,CAFJ,CAJJ,CADJ;AAcH;;AAED,eAAejB,aAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\n\nfunction Recomendation(props) {\n\t\n\tfunction change(selectWord){\n        const txt = document.getElementById('text');\n        const words = txt.value.trim().split(' ');\n        words.pop();\n        words.push(selectWord.trim());\n        txt.value = words.join(' ');\n\t}\n\n    return (\n        <div className='left'>\n            <label>Definition: </label><br/>\n            <p id='definition'>{props.definition}</p>\n            <label>Synonyms: </label><br/>\n            <ul id='synonym_list'>\n            {\n                props.synonyms.map(synonym =>(\n                    <li key={synonym} className=\"synonym\" onClick={e => change(e.target.innerHTML)  }> {synonym}</li>\n                ))\n            }\n            </ul>\n        </div>\n    );\n}\n\nexport default Recomendation;"]},"metadata":{},"sourceType":"module"}